============================= test session starts ==============================
platform linux2 -- Python 2.7.6, pytest-2.8.7, py-1.4.31, pluggy-0.3.1 -- /usr/bin/python
cachedir: .cache
rootdir: /home/kunw/api_test, inifile: 
collecting ... collected 24 items

test_harbor.py::TestSignUp::test_sign_up[user1] FAILED
test_harbor.py::TestSignUp::test_sign_up[user2] FAILED
test_harbor.py::TestUser::test_login_status[user1] ERROR
test_harbor.py::TestSearch::test_search_logined[user1] ERROR
test_harbor.py::TestAdminOptions::test_toggle_admin_option[user1-admin-user1] ERROR
test_harbor.py::TestAdminOptions::test_delete_user[user3-admin-user1] ERROR
test_harbor.py::TestAdminOptions::test_list_user[admin] ERROR
test_harbor.py::TestProject::test_create_project[myrepo1-user1-user2] ERROR
test_harbor.py::TestProject::test_create_project[target1-user1-user2] ERROR
test_harbor.py::TestProjectMemeber::test_project_not_current_member[target1-user1-user2] ERROR
test_harbor.py::TestProjectMemeber::test_add_project_member_by_another[target1-user1-higer_privilege_role_id0-user2] ERROR
test_harbor.py::TestProjectMemeber::test_add_project_member_insufficient_privileges[target1-user2-role_id0-user1] ERROR
test_harbor.py::TestProjectMemeber::test_add_project_member[myrepo1-user2-role_id0-user1] ERROR
test_harbor.py::TestProjectMemeber::test_update_project_member[myrepo1-update_role_id0-user2-user1] ERROR
test_harbor.py::TestProjectMemeber::test_delete_project_member[myrepo1-user2-user1] ERROR
test_harbor.py::TestProject::test_toggle_project_publicity[myrepo1-user1] ERROR
test_harbor.py::TestProjectMemeber::test_project_current_member[myrepo1-user1] ERROR
test_harbor.py::TestProjectMemeber::test_list_project_members[myrepo1-user1] ERROR
test_harbor.py::TestProjectMemeber::test_add_project_member_nonexistent[myrepo1-unknown-role_id0-user1] ERROR
test_harbor.py::TestAccessLog::test_filter_access_log[myrepo1-user1-create-2016-02-26 00:00:00-2016-02-26 23:59:59] ERROR
test_harbor.py::TestProject::test_create_project_illegal[user1] ERROR
test_harbor.py::TestProject::test_project_exists[user1] ERROR
test_harbor.py::TestProject::test_list_project[user1] ERROR
test_harbor.py::TestSearch::test_search_unlogined FAILED

==================================== ERRORS ====================================
_____________ ERROR at setup of TestUser.test_login_status[user1] ______________

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
___________ ERROR at setup of TestSearch.test_search_logined[user1] ____________

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
 ERROR at setup of TestAdminOptions.test_toggle_admin_option[user1-admin-user1] 

admin_user_name = 'admin'

    @pytest.fixture(scope="session")
    def login_as_admin(admin_user_name):
>       return get_session_id(harbor_http_request.login(admin_user_name, "Harbor12345"))

conftest.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
____ ERROR at setup of TestAdminOptions.test_delete_user[user3-admin-user1] ____

admin_user_name = 'admin'

    @pytest.fixture(scope="session")
    def login_as_admin(admin_user_name):
>       return get_session_id(harbor_http_request.login(admin_user_name, "Harbor12345"))

conftest.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
___________ ERROR at setup of TestAdminOptions.test_list_user[admin] ___________

admin_user_name = 'admin'

    @pytest.fixture(scope="session")
    def login_as_admin(admin_user_name):
>       return get_session_id(harbor_http_request.login(admin_user_name, "Harbor12345"))

conftest.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
____ ERROR at setup of TestProject.test_create_project[myrepo1-user1-user2] ____

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
____ ERROR at setup of TestProject.test_create_project[target1-user1-user2] ____

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
 ERROR at setup of TestProjectMemeber.test_project_not_current_member[target1-user1-user2] 

another_user_name = 'user2'

    @pytest.fixture(scope="session")
    def login_as_another_user(another_user_name):
>       return get_session_id(harbor_http_request.login(another_user_name, "Abc1234"))

conftest.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
 ERROR at setup of TestProjectMemeber.test_add_project_member_by_another[target1-user1-higer_privilege_role_id0-user2] 

another_user_name = 'user2'

    @pytest.fixture(scope="session")
    def login_as_another_user(another_user_name):
>       return get_session_id(harbor_http_request.login(another_user_name, "Abc1234"))

conftest.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
 ERROR at setup of TestProjectMemeber.test_add_project_member_insufficient_privileges[target1-user2-role_id0-user1] 

another_user_name = 'user2'

    @pytest.fixture(scope="session")
    def login_as_another_user(another_user_name):
>       return get_session_id(harbor_http_request.login(another_user_name, "Abc1234"))

conftest.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
 ERROR at setup of TestProjectMemeber.test_add_project_member[myrepo1-user2-role_id0-user1] 

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
 ERROR at setup of TestProjectMemeber.test_update_project_member[myrepo1-update_role_id0-user2-user1] 

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
 ERROR at setup of TestProjectMemeber.test_delete_project_member[myrepo1-user2-user1] 

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
__ ERROR at setup of TestProject.test_toggle_project_publicity[myrepo1-user1] __

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
 ERROR at setup of TestProjectMemeber.test_project_current_member[myrepo1-user1] 

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
 ERROR at setup of TestProjectMemeber.test_list_project_members[myrepo1-user1] _

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
 ERROR at setup of TestProjectMemeber.test_add_project_member_nonexistent[myrepo1-unknown-role_id0-user1] 

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
 ERROR at setup of TestAccessLog.test_filter_access_log[myrepo1-user1-create-2016-02-26 00:00:00-2016-02-26 23:59:59] 

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
_______ ERROR at setup of TestProject.test_create_project_illegal[user1] _______

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
___________ ERROR at setup of TestProject.test_project_exists[user1] ___________

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
____________ ERROR at setup of TestProject.test_list_project[user1] ____________

user_name = 'user1'

    @pytest.fixture(scope="session")
    def login_as_user(user_name):
>       return get_session_id(harbor_http_request.login(user_name, "Abc1234"))

conftest.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
conftest.py:9: in get_session_id
    return response["response_cookies"]["beegosessionID"]
/usr/local/lib/python2.7/dist-packages/requests/cookies.py:283: in __getitem__
    return self._find_no_duplicates(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'requests.cookies.RequestsCookieJar'>[]>, name = 'beegosessionID'
domain = None, path = None

    def _find_no_duplicates(self, name, domain=None, path=None):
        """Both ``__get_item__`` and ``get`` call this function: it's never
            used elsewhere in Requests. Takes as args name and optional domain and
            path. Returns a cookie.value. Throws KeyError if cookie is not found
            and CookieConflictError if there are multiple cookies that match name
            and optionally domain and path."""
        toReturn = None
        for cookie in iter(self):
            if cookie.name == name:
                if domain is None or cookie.domain == domain:
                    if path is None or cookie.path == path:
                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria
                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))
                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict
    
        if toReturn:
            return toReturn
>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))
E       KeyError: "name='beegosessionID', domain=None, path=None"

/usr/local/lib/python2.7/dist-packages/requests/cookies.py:341: KeyError
=================================== FAILURES ===================================
________________________ TestSignUp.test_sign_up[user1] ________________________

self = <test_harbor.TestSignUp instance at 0x7fc9734cf7a0>
sign_up = {'response_cookies': <<class 'requests.cookies.RequestsCookieJar'>[]>, 'response_payload': '<!DOCTYPE HTML PUBLIC "-//...er.</p>
<hr>
<address>Apache/2.2.3 (CentOS) Server at 127.0.0.1 Port 80</address>
</body></html>
', 'status_code': 404}

    def test_sign_up(self, sign_up):
>       assert get_status(sign_up) == 200
E       assert 404 == 200
E        +  where 404 = get_status({'response_cookies': <<class 'requests.cookies.RequestsCookieJar'>[]>, 'response_payload': '<!DOCTYPE HTML PUBLIC "-//...er.</p>\n<hr>\n<address>Apache/2.2.3 (CentOS) Server at 127.0.0.1 Port 80</address>\n</body></html>\n', 'status_code': 404})

test_harbor.py:12: AssertionError
________________________ TestSignUp.test_sign_up[user2] ________________________

self = <test_harbor.TestSignUp instance at 0x7fc9736fbef0>
sign_up = {'response_cookies': <<class 'requests.cookies.RequestsCookieJar'>[]>, 'response_payload': '<!DOCTYPE HTML PUBLIC "-//...er.</p>
<hr>
<address>Apache/2.2.3 (CentOS) Server at 127.0.0.1 Port 80</address>
</body></html>
', 'status_code': 404}

    def test_sign_up(self, sign_up):
>       assert get_status(sign_up) == 200
E       assert 404 == 200
E        +  where 404 = get_status({'response_cookies': <<class 'requests.cookies.RequestsCookieJar'>[]>, 'response_payload': '<!DOCTYPE HTML PUBLIC "-//...er.</p>\n<hr>\n<address>Apache/2.2.3 (CentOS) Server at 127.0.0.1 Port 80</address>\n</body></html>\n', 'status_code': 404})

test_harbor.py:12: AssertionError
_______________________ TestSearch.test_search_unlogined _______________________

self = <test_harbor.TestSearch instance at 0x7fc972ba62d8>, query_str = 'targe'

    def test_search_unlogined(self, query_str):
        response = harbor_http_request.search(query_str, "")
>       assert get_status(response) == 200
E       assert 404 == 200
E        +  where 404 = get_status({'response_cookies': <<class 'requests.cookies.RequestsCookieJar'>[]>, 'response_payload': '<!DOCTYPE HTML PUBLIC "-//...er.</p>\n<hr>\n<address>Apache/2.2.3 (CentOS) Server at 127.0.0.1 Port 80</address>\n</body></html>\n', 'status_code': 404})

test_harbor.py:29: AssertionError
====================== 3 failed, 21 error in 3.29 seconds ======================
